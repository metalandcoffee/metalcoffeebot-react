import React, { useState, useEffect, useRef } from 'react';
import { Activity, Wifi, WifiOff, AlertCircle } from 'lucide-react';

const TwitchEventSub = () => {
  const [connectionStatus, setConnectionStatus] = useState('disconnected');
  const [sessionId, setSessionId] = useState('');
  const [events, setEvents] = useState([]);
  const [subscriptions, setSubscriptions] = useState([]);
  const wsRef = useRef(null);
  const keepaliveTimeoutRef = useRef(null);

  // Twitch EventSub WebSocket URL
  const TWITCH_WEBSOCKET_URL = 'wss://eventsub.wss.twitch.tv/ws';

  const connect = () => {
    try {
      wsRef.current = new WebSocket(TWITCH_WEBSOCKET_URL);
      setConnectionStatus('connecting');

      wsRef.current.onopen = () => {
        setConnectionStatus('connected');
        console.log('Connected to Twitch EventSub WebSocket');
      };

      wsRef.current.onmessage = (event) => {
        const message = JSON.parse(event.data);
        handleMessage(message);
      };

      wsRef.current.onclose = (event) => {
        setConnectionStatus('disconnected');
        console.log('WebSocket closed:', event.code, event.reason);
        
        // Clear keepalive timeout
        if (keepaliveTimeoutRef.current) {
          clearTimeout(keepaliveTimeoutRef.current);
        }

        // Attempt to reconnect after a delay (unless it was a clean close)
        if (event.code !== 1000) {
          setTimeout(() => {
            if (connectionStatus !== 'connected') {
              connect();
            }
          }, 5000);
        }
      };

      wsRef.current.onerror = (error) => {
        console.error('WebSocket error:', error);
        setConnectionStatus('error');
      };

    } catch (error) {
      console.error('Failed to connect:', error);
      setConnectionStatus('error');
    }
  };

  const handleMessage = (message) => {
    console.log('Received message:', message);

    switch (message.metadata.message_type) {
      case 'session_welcome':
        // Store the session ID for creating subscriptions
        setSessionId(message.payload.session.id);
        
        // Set up keepalive timeout
        const keepaliveTimeout = message.payload.session.keepalive_timeout_seconds * 1000;
        resetKeepaliveTimeout(keepaliveTimeout);
        
        console.log('Session established:', message.payload.session.id);
        break;

      case 'session_keepalive':
        // Reset keepalive timeout
        const keepaliveTimeoutMs = message.payload.session?.keepalive_timeout_seconds * 1000 || 10000;
        resetKeepaliveTimeout(keepaliveTimeoutMs);
        break;

      case 'notification':
        // Handle actual event notifications
        const newEvent = {
          id: Date.now(),
          type: message.payload.subscription.type,
          data: message.payload.event,
          timestamp: new Date().toISOString()
        };
        
        setEvents(prev => [newEvent, ...prev].slice(0, 50)); // Keep last 50 events
        break;

      case 'session_reconnect':
        // Reconnect to new URL
        const reconnectUrl = message.payload.session.reconnect_url;
        disconnect();
        setTimeout(() => {
          wsRef.current = new WebSocket(reconnectUrl);
        }, 1000);
        break;

      default:
        console.log('Unknown message type:', message.metadata.message_type);
    }
  };

  const resetKeepaliveTimeout = (timeout) => {
    if (keepaliveTimeoutRef.current) {
      clearTimeout(keepaliveTimeoutRef.current);
    }
    
    // Set timeout to close connection if no keepalive received
    keepaliveTimeoutRef.current = setTimeout(() => {
      console.warn('Keepalive timeout - connection may be stale');
      disconnect();
    }, timeout + 1000); // Add 1 second buffer
  };

  const disconnect = () => {
    if (wsRef.current) {
      wsRef.current.close(1000, 'User requested disconnect');
      wsRef.current = null;
    }
    
    if (keepaliveTimeoutRef.current) {
      clearTimeout(keepaliveTimeoutRef.current);
      keepaliveTimeoutRef.current = null;
    }
    
    setConnectionStatus('disconnected');
    setSessionId('');
  };

  const createSubscription = async (subscriptionType, condition, accessToken) => {
    if (!sessionId) {
      alert('No active session. Please connect first.');
      return;
    }

    try {
      const response = await fetch('https://api.twitch.tv/helix/eventsub/subscriptions', {
        method: 'POST',
        headers: {
          'Client-ID': 'YOUR_CLIENT_ID', // Replace with your actual client ID
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          type: subscriptionType,
          version: '1',
          condition: condition,
          transport: {
            method: 'websocket',
            session_id: sessionId
          }
        })
      });

      const result = await response.json();
      
      if (response.ok) {
        setSubscriptions(prev => [...prev, result.data[0]]);
        console.log('Subscription created:', result.data[0]);
      } else {
        console.error('Failed to create subscription:', result);
        alert(`Failed to create subscription: ${result.message}`);
      }
    } catch (error) {
      console.error('Error creating subscription:', error);
      alert('Error creating subscription');
    }
  };

  // Example: Subscribe to channel follow events
  const subscribeToFollows = () => {
    const broadcasterUserId = prompt('Enter broadcaster user ID:');
    const accessToken = prompt('Enter your access token:');
    
    if (broadcasterUserId && accessToken) {
      createSubscription(
        'channel.follow',
        { broadcaster_user_id: broadcasterUserId, moderator_user_id: broadcasterUserId },
        accessToken
      );
    }
  };

  useEffect(() => {
    return () => {
      disconnect();
    };
  }, []);

  const getStatusColor = () => {
    switch (connectionStatus) {
      case 'connected': return 'text-green-600';
      case 'connecting': return 'text-yellow-600';
      case 'error': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  const getStatusIcon = () => {
    switch (connectionStatus) {
      case 'connected': return <Wifi className="w-5 h-5" />;
      case 'error': return <AlertCircle className="w-5 h-5" />;
      default: return <WifiOff className="w-5 h-5" />;
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-4 flex items-center gap-2">
          <Activity className="w-6 h-6 text-purple-600" />
          Twitch EventSub WebSocket
        </h1>
        
        <div className={`flex items-center gap-2 mb-4 ${getStatusColor()}`}>
          {getStatusIcon()}
          <span className="font-medium capitalize">{connectionStatus}</span>
          {sessionId && (
            <span className="text-xs text-gray-500 ml-2">
              Session: {sessionId.substring(0, 8)}...
            </span>
          )}
        </div>

        <div className="flex gap-3 flex-wrap">
          <button
            onClick={connect}
            disabled={connectionStatus === 'connected' || connectionStatus === 'connecting'}
            className="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Connect
          </button>
          
          <button
            onClick={disconnect}
            disabled={connectionStatus === 'disconnected'}
            className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Disconnect
          </button>

          <button
            onClick={subscribeToFollows}
            disabled={connectionStatus !== 'connected' || !sessionId}
            className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Subscribe to Follows
          </button>
        </div>
      </div>

      {/* Subscriptions */}
      {subscriptions.length > 0 && (
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-gray-700 mb-3">Active Subscriptions</h2>
          <div className="space-y-2">
            {subscriptions.map((sub) => (
              <div key={sub.id} className="p-3 bg-gray-50 rounded border">
                <div className="flex justify-between items-center">
                  <span className="font-medium">{sub.type}</span>
                  <span className="text-sm text-gray-500">{sub.status}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Events Log */}
      <div>
        <h2 className="text-lg font-semibold text-gray-700 mb-3">Events Log</h2>
        <div className="bg-gray-50 rounded-lg p-4 max-h-96 overflow-y-auto">
          {events.length === 0 ? (
            <p className="text-gray-500 text-center py-8">No events received yet</p>
          ) : (
            <div className="space-y-3">
              {events.map((event) => (
                <div key={event.id} className="p-3 bg-white rounded border">
                  <div className="flex justify-between items-start mb-2">
                    <span className="font-medium text-purple-600">{event.type}</span>
                    <span className="text-xs text-gray-500">
                      {new Date(event.timestamp).toLocaleTimeString()}
                    </span>
                  </div>
                  <pre className="text-xs text-gray-600 overflow-x-auto">
                    {JSON.stringify(event.data, null, 2)}
                  </pre>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
        <h3 className="font-semibold text-blue-800 mb-2">Setup Instructions:</h3>
        <ol className="text-sm text-blue-700 space-y-1 list-decimal list-inside">
          <li>Replace 'YOUR_CLIENT_ID' with your actual Twitch Client ID</li>
          <li>Obtain a user access token with the appropriate scopes</li>
          <li>Connect to the WebSocket</li>
          <li>Create subscriptions using the buttons above</li>
          <li>Events will appear in the log below</li>
        </ol>
      </div>
    </div>
  );
};

export default TwitchEventSub;